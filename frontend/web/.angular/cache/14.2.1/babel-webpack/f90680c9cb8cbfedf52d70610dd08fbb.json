{"ast":null,"code":"import { webSocket } from 'rxjs/webSocket';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\"; // export interface EventHandler {\n//   (event: any): void;\n// }\n\nexport let WebsocketService = /*#__PURE__*/(() => {\n  class WebsocketService {\n    constructor() {} // listener(callback:EventHandler){\n    //   this.subject.subscribe({\n    //     next: (msg: any)=> callback(msg), // Called whenever there is a message from the server.\n    //     error: (err: any) => console.log(err), // Called if at any point WebSocket API signals some kind of error.\n    //     complete: () => console.log('complete') // Called when connection is closed (for whatever reason).\n    //    });\n    // }\n\n\n    connect(juegoId) {\n      this.subject = webSocket(environment.socketBase + juegoId);\n      return this.subject;\n    }\n\n    close() {\n      this.subject.unsubscribe();\n    }\n\n  }\n\n  WebsocketService.ɵfac = function WebsocketService_Factory(t) {\n    return new (t || WebsocketService)();\n  };\n\n  WebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebsocketService,\n    factory: WebsocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return WebsocketService;\n})();","map":null,"metadata":{},"sourceType":"module"}