{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/api.service\";\nimport * as i2 from \"src/app/shared/services/auth.service\";\nimport * as i3 from \"src/app/shared/services/websocket.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/material/grid-list\";\nimport * as i6 from \"@angular/material/button\"; //TODO: componente para el tablero de juego\n\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    constructor(api, authService, ws, route) {\n      this.api = api;\n      this.authService = authService;\n      this.ws = ws;\n      this.route = route;\n      this.cartasDelJugador = [];\n      this.cartasDelTablero = [];\n      this.tiempo = 0;\n      this.jugadoresRonda = 0;\n      this.jugadoresTablero = 0;\n      this.numeroRonda = 0;\n      this.juegoId = \"\";\n      this.uid = \"\";\n      this.roundStarted = false;\n    }\n\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        this.juegoId = params['id'];\n        this.uid = this.authService.user.uid;\n        this.api.getMiMazo(this.uid, this.juegoId).subscribe(element => {\n          this.cartasDelJugador = element.cartas;\n        });\n        this.api.getTablero(this.juegoId).subscribe(element => {\n          this.cartasDelTablero = Object.entries(element.tablero.cartas).flatMap(a => {\n            return a[1];\n          });\n          this.tiempo = element.tiempo;\n          this.jugadoresRonda = element.ronda.jugadores.length;\n          this.jugadoresTablero = element.tablero.jugadores.length;\n          this.numeroRonda = element.ronda.numero;\n        });\n        this.ws.open(this.juegoId);\n        this.ws.listener(event => {\n          console.log(event);\n\n          if (event.type === 'cardgame.ponercartaentablero') {\n            this.cartasDelTablero.push({\n              cartaId: event.carta.cartaId.uuid,\n              poder: event.carta.poder,\n              estaOculta: event.carta.estaOculta,\n              estaHabilitada: event.carta.estaHabilitada\n            });\n          }\n\n          if (event.type === 'cardgame.cartaquitadadelmazo') {\n            this.cartasDelJugador = this.cartasDelJugador.filter(item => item.cartaId !== event.carta.cartaId.uuid);\n          }\n\n          if (event.type === 'cardgame.tiempocambiadodeltablero') {\n            this.tiempo = event.tiempo;\n          }\n\n          if (event.type === 'cardgame.rondainiciada') {\n            this.roundStarted = true;\n          }\n\n          if (event.type === 'cardgame.rondaterminada') {\n            this.roundStarted = false;\n            window.location.reload();\n          }\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      this.ws.close();\n    }\n\n    poner(cartaId) {\n      this.api.ponerCarta({\n        cartaId: cartaId,\n        juegoId: this.juegoId,\n        jugadorId: this.uid\n      }).subscribe();\n    }\n\n    iniciarRonda() {\n      this.api.iniciarRonda({\n        juegoId: this.juegoId\n      }).subscribe();\n    }\n\n  }\n\n  BoardComponent.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.WebsocketService), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n\n  BoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    decls: 11,\n    vars: 13,\n    consts: [[1, \"h2\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\";\", \"\", 3, \"colspan\", \"rowspan\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"h4\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_4_listener() {\n          return ctx.iniciarRonda();\n        });\n        i0.ɵɵtext(5, \" INICIAR \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-grid-list\")(7, \"mat-grid-tile\", 2);\n        i0.ɵɵtext(8, \" 1 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-grid-tile\", 2);\n        i0.ɵɵtext(10, \" 2 \");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"Tiempo: \", ctx.tiempo, \"s\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate3(\" RONDA # \", ctx.numeroRonda, \" Jugadores [\", ctx.jugadoresRonda, \"/\", ctx.jugadoresTablero, \"] \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"disabled\", ctx.roundStarted);\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleProp(\"background\", \"red\");\n        i0.ɵɵproperty(\"colspan\", 1)(\"rowspan\", 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"background\", \"blue\");\n        i0.ɵɵproperty(\"colspan\", 1)(\"rowspan\", 1);\n      }\n    },\n    dependencies: [i5.MatGridList, i5.MatGridTile, i6.MatButton]\n  });\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}